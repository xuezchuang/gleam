<?xml version='1.0'?>

<effect>
	<shader type="vertex_shader" name="BaseVS">
		<attrib  name="pos" usage="position"/>
		<uniform type="mat4" name="mvp"/>
		<code>
			<![CDATA[
in vec3 pos;
uniform mat4 mvp;
void main()
{
	gl_Position = mvp * vec4(pos, 1.0f);
}
      ]]>
		</code>
	</shader>

	<shader type="vertex_shader" name="BaseTextureVS">
		<attrib  name="pos" usage="position"/>
		<attrib  name="uv"  usage="texture_coord"/>
		<uniform type="mat4" name="mvp"/>
		<code>
			<![CDATA[
in vec3 pos;
in vec2 uv;
uniform mat4 mvp;
out vec2 UV;
void main()
{
	gl_Position = mvp * vec4(pos, 1.0f);
	UV = uv;
}
      ]]>
		</code>
	</shader>

	<shader type="vertex_shader" name="BaseShadeVS">
		<attrib  name="pos" usage="position"/>
		<!--<attrib  name="normal" usage="normal"/>-->
		<uniform type="mat4" name="mvp"/>
		<!--<uniform type="mat4" name="normal_matrix"/>-->
		<code>
			<![CDATA[
in vec4 pos;
in vec3 normal;

out vec2 UV;

uniform mat4 mvp;


void main(void)
{
    gl_Position = mvp * pos;
	UV = pos.xy;
}
      ]]>
		</code>
	</shader>

	<!--  Ordinary Trans -->
	<!-- 设置为glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);-->

	<shader type="vertex_shader" name="BaseOrdinaryVS">
		<attrib  name="pos" usage="position"/>
		<uniform type="mat4" name="mvp"/>
		<code>
			<![CDATA[
in vec3 pos;
uniform mat4 mvp;

void main()
{
  gl_Position = mvp * vec4(pos, 1.0f);
}
      ]]>
		</code>
	</shader>

	<shader type="fragment_shader" name="BaseOrdinaryFS">
		<uniform type="vec4" name="color"/>
		<code>
			<![CDATA[
uniform vec4 color;
out vec4 FragColor;

void main(void)
{
    FragColor = color;
}
		]]>
		</code>
	</shader>
	
	<technique name="Ordinary">
		<state name="cull_mode" value="none"/>
		<state name="depth_enable" value="false"/>
		<state name="blend_enable" value="true"/>
		<state name="src_blend" value="src_alpha"/>
		<state name="dest_blend" value="inv_src_alpha"/>
		<state name="src_blend_alpha" value="one"/>
		<state name="dest_blend_alpha" value="inv_src_alpha"/>
		<state name="vertex_shader" value="BaseOrdinaryVS"/>
		<state name="fragment_shader" value="BaseOrdinaryFS"/>
	</technique>

	<!--Depth Peeling OIT-->

	<shader type="fragment_shader" name="FrontPeelingInitFS">
		<uniform type="vec4" name="color"/>
		<code>
			<![CDATA[
uniform vec4 color;
out vec4 FragColor;

void main(void)
{
    FragColor = vec4(color.rgb * color.a, 1.0 - color.a);
}
		]]>
		</code>
	</shader>

	<shader type="fragment_shader" name="FrontPeelingPeelFS">
		<uniform type="sampler" name="depth_tex">
			<state name="filtering" value="min_mag_mip_nearest"/>
			<state name="address_u" value="clamp"/>
			<state name="address_v" value="clamp"/>
		</uniform>
		<uniform type="vec4" name="color"/>
		<code>
			<![CDATA[
      
uniform vec4 color;
uniform sampler2D depth_tex;

out vec4 FragColor;

void main(void)
{
    // Bit-exact comparison between FP32 z-buffer and fragment depth
    vec2 frontUV = gl_FragCoord.xy / textureSize(depth_tex, 0);
    float frontDepth = texture(depth_tex, frontUV).r;
    if (gl_FragCoord.z <= frontDepth) 
	{
        discard;
    }
    
    // Shade all the fragments behind the z-buffer
    FragColor = vec4(color.rgb * color.a, color.a);
}
		]]>
		</code>
	</shader>
	
	<shader type="fragment_shader" name="FrontPeelingBlendFS">
		<uniform type="sampler" name="tex">
			<state name="filtering" value="min_mag_mip_nearest"/>
			<state name="address_u" value="clamp"/>
			<state name="address_v" value="clamp"/>
		</uniform>
		<code>
			<![CDATA[
in vec2 UV;
      
uniform sampler2D tex;

out vec4 FragColor;

void main(void)
{
    FragColor = texture(tex, UV);
}
		]]>
		</code>
	</shader>

	<shader type="fragment_shader" name="FrontPeelingFinalFS">
		<uniform type="sampler" name="tex">
			<state name="filtering" value="min_mag_mip_nearest"/>
			<state name="address_u" value="clamp"/>
			<state name="address_v" value="clamp"/>
		</uniform>
		<uniform type="vec3" name="bgColor"/>
		<code>
			<![CDATA[
in vec2 UV;
      
uniform sampler2D tex;
uniform vec3 bgColor;

out vec4 outColor;

void main(void)
{
    vec4 frontColor = texture(tex, UV);
    float transmittance = frontColor.a;
    outColor.rgb = frontColor.rgb;// + bgColor * transmittance;
	if(frontColor.a < 0.0001)
		outColor.rgb = bgColor;
    outColor.a = 1.0;
}
	  ]]>
		</code>
	</shader>
	
	<technique name="PeelingInitTech">
		<state name="cull_mode" value="none"/>
		<state name="depth_enable" value="true"/>
		<state name="blend_enable" value="false"/>
		<state name="vertex_shader" value="BaseVS"/>
		<state name="fragment_shader" value="FrontPeelingInitFS"/>
	</technique>

	<technique name="PeelingPeelTech">
		<state name="cull_mode" value="none"/>
		<state name="blend_enable" value="false"/>
		<state name="depth_enable" value="true"/>
		<state name="vertex_shader" value="BaseVS"/>
		<state name="fragment_shader" value="FrontPeelingPeelFS"/>
	</technique>

	<technique name="PeelingBlendTech">
		<state name="depth_enable" value="false"/>
		<state name="blend_enable" value="true"/>
		<state name="blend_op" value="add"/>
		<state name="blend_op_alpha" value="add"/>
		<state name="src_blend" value="dst_alpha"/>
		<state name="dest_blend" value="one"/>
		<state name="src_blend_alpha" value="zero"/>
		<state name="dest_blend_alpha" value="inv_src_alpha"/>
		<state name="vertex_shader" value="BaseTextureVS"/>
		<state name="fragment_shader" value="FrontPeelingBlendFS"/>
	</technique>

	<technique name="PeelingFinalTech">
		<state name="depth_enable" value="false"/>
		<state name="vertex_shader" value="BaseTextureVS"/>
		<state name="fragment_shader" value="FrontPeelingFinalFS"/>
	</technique>


	<!--Weighted Blended OIT-->
	<shader type="fragment_shader" name="WeightedBlendedBlendFS">
		<uniform type="float" name="depth_scale"/>
		<uniform type="vec4" name="color"/>
		<code>
			<![CDATA[


uniform float depth_scale;
uniform vec4 color;

layout(location=0) out vec4 SumColor;
layout(location=1) out vec4 SumWeight;

void main(void)
{
    // Assuming that the projection matrix is a perspective projection
    // gl_FragCoord.w returns the inverse of the oPos.w register from the vertex shader
    float viewDepth = abs(1.0 / gl_FragCoord.w);

    // Tuned to work well with FP16 accumulation buffers and 0.001 < linearDepth < 2.5
    // See Equation (9) from http://jcgt.org/published/0002/02/09/
    float linearDepth = viewDepth * depth_scale;
    float weight = clamp(0.03 / (1e-5 + pow(linearDepth, 4.0)), 1e-2, 3e3);
	
	

    SumColor = vec4(color.rgb * color.a, color.a) * weight;
    SumWeight = vec4(color.a);
}
	  ]]>
		</code>
	</shader>
	
	<shader type="fragment_shader" name="WeightedBlendedFinalFS">
		<uniform type="sampler" name="tex0">
			<state name="filtering" value="min_mag_mip_nearest"/>
			<state name="address_u" value="clamp"/>
			<state name="address_v" value="clamp"/>
		</uniform>
		<uniform type="sampler" name="tex1">
			<state name="filtering" value="min_mag_mip_nearest"/>
			<state name="address_u" value="clamp"/>
			<state name="address_v" value="clamp"/>
		</uniform>
		<uniform type="vec3" name="bgColor"/>
		<code>
			<![CDATA[

in vec2 UV;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform vec3 bgColor;

out vec4 FragColor;

void main(void)
{
    vec4 sumColor = texture(tex0, UV);
    float transmittance = texture(tex1, UV).r;
    vec3 averageColor = sumColor.rgb / max(sumColor.a, 0.00001);

    FragColor.rgb = averageColor * (1 - transmittance) + bgColor * transmittance;
}
	  ]]>
		</code>
	</shader>

	<technique name="WeightedBlendedBlendTech">
		<state name="cull_mode" value="none"/>
		<state name="depth_enable" value="false"/>
		<state name="blend_enable" value="true"/>

		<state name="blend_op" index="0" value="add"/>
		<state name="blend_op_alpha" index="0" value="add"/>
		<state name="src_blend" index="0" value="one"/>
		<state name="dest_blend" index="0" value="one"/>
		<state name="src_blend_alpha" index="0" value="one"/>
		<state name="dest_blend_alpha" index="0" value="one"/>

		<state name="blend_op" index="1" value="add"/>
		<state name="blend_op_alpha" index="1" value="add"/>
		<state name="src_blend" index="1" value="zero"/>
		<state name="dest_blend" index="1" value="inv_src_alpha"/>
		<state name="src_blend_alpha" index="1" value="zero"/>
		<state name="dest_blend_alpha" index="1" value="inv_src_alpha"/>

		<state name="vertex_shader" value="BaseVS"/>
		<state name="fragment_shader" value="WeightedBlendedBlendFS"/>
	</technique>

	<technique name="WeightedBlendedFinalTech">
		<state name="depth_enable" value="false"/>
		<state name="vertex_shader" value="BaseShadeVS"/>
		<state name="fragment_shader" value="WeightedBlendedFinalFS"/>
	</technique>


</effect>



